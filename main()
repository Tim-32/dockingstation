#include "mbed.h"
#include "platform/mbed_thread.h"


enum State {                                                    //de states die gebruikt worden
    box_open,
    box_dicht,
    box_wacht,
    beurs_mode,
    box_opstart
};
#define timer_read_ms(x)    chrono::duration_cast<chrono::milliseconds>((x).elapsed_time()).count();    // defineren van timer (in ms)
Timer debounce;                                                                                         // aanmaken timer 



   //inputs
    InterruptIn button_open                         {D0};                  //knop openen box (pijl naar boven)
    InterruptIn button_close                        {D1};                  //knop sluiten box (pijl naar beneden)
    InterruptIn button_stop                         {D2};                  //knop stop box (rode stop knop)
    DigitalIn   weerstation                         {D3};                  // weerstation is allen voorbereid
    DigitalOut reed_contact_open                    {D5};                  // dit reed contact wordt geschakelt als de box open is
    DigitalOut reed_contact_dicht                   {D6};                  // dit reed contact wordt geschakelt als de box dicht is
    DigitalIn reserve_1                 	        {D7};                  // reserve contact
    
   
   
   // outputs
    DigitalOut motorcontroler_dir                   {D8};                 //dir 1, motor vooruit, dir 0 motor achteruit 
    DigitalOut motorcontroler_enebled               {D13};                // enebled = 1 motor stil
    DigitalOut motorcontroler_pulse                 {D14};                // pulse voor snelheid
    PwmOut     myled                                (D9);                 // de aansteuring van de RGB led (rood)
    PwmOut     myled2                               (D10);                // de aansteuring van de RGB led (groen)
    PwmOut     myled3                               (D11);                // de aansteuring van de RGB led (blauw)
    PwmOut     buzzer                               (D15);                // de aansteuring voor de buzzer


void led_start (){                                             //  deze functie regelt het efect van de led bij het opstraten
    
    myled=0.0;                                                 // zet alle leds uit
    myled2=0.0;
    myled3=0.0;

   for(double x = 0.0; x <= 1.0; x = x+0.2) {                  // for loop om groene led langzaam velller te maken
   
        myled2 = x*x;
        thread_sleep_for(200);
    }
        thread_sleep_for(200);
        myled2= 0.5;                                           // led blijft op 50% branden
}

void led_movement(){                                           // funcie voor indicatie box gaat bewegen
    myled = 0.75;                                              // led rood op 75%
    myled2 = 0.25;                                             // led groen op 25%
    buzzer = 0.5;                                            
    thread_sleep_for(200);
    myled = 0.0;                                               // alle leds uit
    myled2 = 0.0;
    myled3 = 0.0;
    buzzer = 0.0;
    thread_sleep_for(200);
}

void leds_off(){
    myled = 0.0;                                               // alle leds uit
    myled2 = 0.0;
    myled3 = 0.0;
    buzzer = 0.0;

}

float led_rainbow(float i){                                           // funcie voor het regenboog effect
    
        float p = 3 * i;
        myled = 1.0 - ((p < 1.0) ? 1.0 - p : (p > 2.0) ? p - 2.0 : 0.0);
        myled2 = 1.0 - ((p < 1.0) ? p : (p > 2.0) ? 0.0 : 2.0 - p);
        myled3 = 1.0 - ((p < 1.0) ? 0.0 : (p > 2.0) ? 3.0 - p : p - 1.0); ; 
        thread_sleep_for (10);
    
 return i;
}

void led_flash(){                                           // funcie voor het flash effect      
    myled=1.0;
    myled2=1.0;
    myled3=1.0;
    thread_sleep_for(100);
    myled = 0.0;
    myled2 = 0.0;
    myled3 = 0.0;
    thread_sleep_for(100);
}

void led_heardbead(){                                           // funcie voor het flash effect      
    myled=1.0;
    myled2=0.25;
    myled3=0.0;
    thread_sleep_for(20);
    myled=1.0;
    myled2=0.25;
    myled3=0.0;
    thread_sleep_for(20);
    myled = 0.0;
    myled2 = 0.0;
    myled3 = 0.0;
    thread_sleep_for(500);
}

void motor_forwards(int us){
       motorcontroler_dir = false;           // false is voor uit true is achter uit
       motorcontroler_enebled = false;       // true is stoppen
       motorcontroler_pulse = 1;             // de hoogte van de pulse
       wait_us( us);                         // de tijd dat hij wacht in micro seconden
       motorcontroler_pulse = 0;             // pulse laag
       wait_us( us); 

}


void motor_backwards(int us){
       motorcontroler_dir = true;           // false is voor uit true is achter uit
       motorcontroler_enebled = false;       // true is stoppen
       motorcontroler_pulse = 1;             // de hoogte van de pulse
       wait_us( us);                         // de tijd dat hij wacht in micro seconden
       motorcontroler_pulse = 0;             // pulse laag
       wait_us( us); 

}


bool knop_open_box      = false;                                                       // een bool voor het open van de box.(wordt true als de knop is ingedrukt en debouce is geweest)
bool knop_sluit_box     = false;                                                       // een bool voor het sluiten van de box.(wordt true als de knop is ingedrukt en debouce is geweest)
bool knop_wacht_box     = false;                                                       // een bool voor het stopen van de box.(wordt true als de knop is ingedrukt en debouce is geweest)


void knop_open(){                                                                     // funtie voor debounce knop open box
    auto ms =timer_read_ms(debounce);                               
    if (ms>200){
    knop_open_box=true;
    debounce.reset();
    }
}


void knop_dicht(){                                                                    // funtie voor debounce knop dicht box
    auto ms =timer_read_ms(debounce);   
    if (ms>200){
    knop_sluit_box=true;
    debounce.reset();
    }
}

void knop_stop(){                                                                      // funtie voor debounce stop
    auto ms =timer_read_ms(debounce);   
    if (ms>200){
    knop_wacht_box=true;
    debounce.reset();
    }
}





int main()
{
    button_stop.rise( knop_stop);                                                  // de interupt funcies
    button_open.rise(knop_open);
    button_close.rise(knop_dicht);
    

    debounce.start();                                                              // start debounce timer
    
    State state = box_opstart;                                                     // state start punt

    bool entry = true;                                                             // waarden worden geset voor dat de box ingebuikt is
    int counter = 0;
    bool opgestart = false;


    while (true) {
        switch(state) {
            case box_opstart:                                                      // de state die wordt gebruik voor het opstarten van de box
                if (entry){
                    led_start();                                                   // het opstart effectt
                    entry = false;
                    opgestart = true;
                
                    if(opgestart == true){
                    state = box_wacht;
                    entry = true;
                    }
                }
            break;



            case box_wacht:                                                       //de state voor als de box in stilstand staat.
                if(entry) {                         
                  
                    motorcontroler_enebled = true;
                    
                    
                    buzzer=false;
                    myled2=0.5;                                                 // groene led geeft aan dat de box stilstaat
                    entry = false;

                    if(knop_wacht_box && knop_sluit_box ){                      //couter om in beurs modes te gaan
                        counter ++;
                    }

                
                 if(knop_open_box&&!(reed_contact_open)&&(weerstation)&&!(knop_wacht_box)){
                     state = box_open;                                                        // zet state naar box openen om de box te openen
                     entry = true;
                     knop_open_box=false;
                     counter = 0;
                     leds_off();
                    } 
               
                 if(knop_sluit_box&&!(reed_contact_dicht)&&!(knop_wacht_box)){
                     state = box_dicht;                                          // zet state naar box sluiten om de box te sluiten
                     entry = true;
                     knop_sluit_box=false;
                     counter = 0;
                     leds_off();
                    }

                 if (counter == 5){
                     state = beurs_mode;                                          // zet state naar box in beurs mode
                     entry = true;
                     counter = 0;
                     leds_off();
                    }
                }    

            break;





            case box_open:                                                    // state om de box te openen
                if(entry){
                    for (int i = 0;i<3;++i){
                    
                    led_movement();                                           // effect voor bewegen box
                    }                                       
                    
                   myled = 0.75;                                              // led rood op 75%
                   myled2 = 0.25; 
                   
                   while(!(reed_contact_open)||!(knop_wacht_box)){                               // led groen op 25%
                   motor_forwards(62);}
                    
                    
                   
                   
                      
                   
                   entry = false;
                

                 if(reed_contact_open) {                                        // box is open
                     state = box_wacht;
                     entry = true;
                     leds_off();
                    }
                 if(knop_wacht_box){
                     state = box_wacht;                                        // zet state naar box wacht om de box stil te laten staan
                     entry = true;
                     knop_wacht_box=false;
                     leds_off();
                    } 
                }
               
            break;





            case box_dicht:                                                    // state om de box te openen
                if(entry){
                 
                   for (int i = 0;i<3;++i){
                    
                        led_movement();                                         // effect voor bewegen box
                    }                                       
                    
                    myled = 0.75;                                              // led rood op 75%
                    myled2 = 0.25; 
                 while (!(reed_contact_dicht)||!(knop_wacht_box)){
                    motor_backwards(62);}
                    
                
                    if(reed_contact_dicht) {                                    // box is dicht
                        state = box_wacht;
                        entry = true;
                        leds_off();
                    }


               
                 if(knop_wacht_box){
                     state = box_wacht;                                        // zet state naar box wacht om de box stil te laten staan
                     entry = true;
                     knop_wacht_box=false;
                     leds_off();
                    }   
                }
            break;
            


            case beurs_mode:                                                    // state om de box in beurs modes te zetten
                if(entry){
                    int menu=0;                                                 // toggel tussen effecten
                   while (knop_wacht_box==false){
                        if (menu == 0){
                           led_flash();
                           if (knop_sluit_box == true){ menu=menu+1;}
                           if (knop_open_box == true){ menu=2;}
                        }
                        if (menu == 1){
                            led_heardbead();
                            if (knop_sluit_box == true){ menu=menu+1;}
                            if (knop_open_box == true){ menu=menu-1;}
                        }         
                        if ((menu == 2)&&!(knop_sluit_box)&&!(knop_open_box)){
                            for(float i = 0.0; i < 1.0 ; i += 0.001) {
                            led_rainbow( i);
                            if (knop_sluit_box == true){ menu=0;      i = 1;}
                            if (knop_open_box == true) { menu=menu-1; i = 1;}
                            }
                        } 
                      
                   } 
                
                    entry = false;
                }
               if(knop_wacht_box){
                    state = box_wacht;               // zet state naar box wacht om de box stil te laten staan
                    entry = true;
                    knop_wacht_box=false;
                    leds_off();
               }    
            break;


            default:
            break;
        }
    } 
    

return 0;
}
